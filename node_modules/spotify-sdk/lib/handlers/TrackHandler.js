/*
 * TrackHandler
 * Methods for retrieving information about one or more tracks from the Spotify catalog.
 *
 * API Doc: https://developer.spotify.com/web-api/track-endpoints/
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _helpersTrack = require('../helpers/Track');

var _helpersTrack2 = _interopRequireDefault(_helpersTrack);

var _Client = require('../Client');

var _Client2 = _interopRequireDefault(_Client);

var TrackHandler = (function () {
    function TrackHandler() {
        _classCallCheck(this, TrackHandler);
    }

    _createClass(TrackHandler, [{
        key: 'search',

        /*
         * Get a collection of tracks that match a keyword string.
         * Doc: https://developer.spotify.com/web-api/search-item/
         *
         * @public
         * @param {string} name Name of the track.
         * @param {object} query Optional query parameters.
         * @return {Collection} trackCollection
         */
        value: function search(name, query) {
            return _Client2['default'].instance.request('/search?type=track&q=' + encodeURIComponent(name), 'GET', query);
        }

        /*
         * Get a single/collection of track/s identified by its unique/list of Spotify ID.
         * Doc: https://developer.spotify.com/web-api/get-albums-tracks/ FIXME: check the url
         *
         * @public 
         * @param {string|array} ids Track id/ids to retrive
         * @param {object} query Optional query parameters.
         * @return {Track|Collection} Track|trackCollection
         */
    }, {
        key: 'get',
        value: function get(ids, query) {
            if (Array.isArray(ids)) {
                return _Client2['default'].instance.request('/tracks/?ids=' + ids, 'GET', query);
            } else {
                return _Client2['default'].instance.request('/tracks/' + ids, 'GET', query);
            }
        }

        /*
         * @public 
         * @param {object} item Object to convert in entity
         * @return {Playlist}
         */
    }, {
        key: 'convert',
        value: function convert(item) {
            if (item.uri) {
                return new _helpersTrack2['default'](item);
            } else {
                return new _helpersTrack2['default'](item.track);
            }
        }
    }]);

    return TrackHandler;
})();

exports['default'] = TrackHandler;
module.exports = exports['default'];