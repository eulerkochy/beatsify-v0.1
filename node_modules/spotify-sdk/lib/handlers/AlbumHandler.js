/*
 * AlbumHandler
 * Methods for retrieving information about one or more albums from the Spotify catalog.
 *
 * API Doc: https://developer.spotify.com/web-api/album-endpoints/
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _helpersAlbum = require('../helpers/Album');

var _helpersAlbum2 = _interopRequireDefault(_helpersAlbum);

var _Client = require('../Client');

var _Client2 = _interopRequireDefault(_Client);

var AlbumHandler = (function () {
    function AlbumHandler() {
        _classCallCheck(this, AlbumHandler);
    }

    _createClass(AlbumHandler, [{
        key: 'search',

        /*
         * Get a collection of albums that match a keyword string.
         * Doc: https://developer.spotify.com/web-api/search-item/
         *
         * @public
         * @param {string} name Name of the album.
         * @param {object} query Optional query parameters.
         * @return {Collection} albumsCollection
         */
        value: function search(name, query) {
            return _Client2['default'].instance.request('/search?type=album&q=' + encodeURIComponent(name), 'GET', query);
        }

        /*
         * Get a single/collection of album/s identified by its unique/list of Spotify ID.
         * Doc: https://developer.spotify.com/web-api/get-album/
         *
         * @public 
         * @param {string|array} ids Album id/ids to retrive
         * @param {object} query Optional query parameters.
         * @return {Album|Collection} Album|artistCollection
         */
    }, {
        key: 'get',
        value: function get(ids, query) {
            if (Array.isArray(ids)) {
                return _Client2['default'].instance.request('/albums/?ids=' + ids, 'GET', query);
            } else {
                return _Client2['default'].instance.request('/albums/' + ids, 'GET', query);
            }
        }

        /*
         * Get a list of new album releases featured in Spotify.
         * Doc: https://developer.spotify.com/web-api/get-list-new-releases/
         *
         * @public 
         * @required {OAuth}
         * @param {object} query Optional query parameters.
         * @return {Collection} albumsCollection
         */
    }, {
        key: 'newReleases',
        value: function newReleases(query) {
            return _Client2['default'].instance.request('/browse/new-releases', 'GET', query);
        }

        /*
         * @public 
         * @param {object} item Object to convert in entity
         * @return {Album}
         */
    }, {
        key: 'convert',
        value: function convert(item) {
            return new _helpersAlbum2['default'](item);
        }
    }]);

    return AlbumHandler;
})();

exports['default'] = AlbumHandler;
module.exports = exports['default'];