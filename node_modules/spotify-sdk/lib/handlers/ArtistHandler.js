/*
 * ArtistHandler
 * Methods for retrieving information about one or more artists from the Spotify catalog.
 *
 * API Doc: https://developer.spotify.com/web-api/artist-endpoints/
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _helpersArtist = require('../helpers/Artist');

var _helpersArtist2 = _interopRequireDefault(_helpersArtist);

var _Client = require('../Client');

var _Client2 = _interopRequireDefault(_Client);

var ArtistHandler = (function () {
    function ArtistHandler() {
        _classCallCheck(this, ArtistHandler);
    }

    _createClass(ArtistHandler, [{
        key: 'search',

        /*
         * Get a collection of artists that match a keyword string.
         * Doc: https://developer.spotify.com/web-api/search-item/
         *
         * @public
         * @param {string} name Name of the artist.
         * @param {object} query Optional query parameters.
         * @return {Collection} artistCollection
         */
        value: function search(name, query) {
            return _Client2['default'].instance.request('/search?type=artist&q=' + encodeURIComponent(name), 'GET', query);
        }

        /*
         * Get a single/collection of artist/s identified by its unique/list of Spotify ID.
         * Doc: https://developer.spotify.com/web-api/get-artist/
         *
         * @public 
         * @param {string|array} ids Artist id/ids to retrive
         * @param {object} query Optional query parameters.
         * @return {Artist|Collection} Artist|artistCollection
         */
    }, {
        key: 'get',
        value: function get(ids, query) {
            if (Array.isArray(ids)) {
                return _Client2['default'].instance.request('/artists/?ids=' + ids, 'GET', query);
            } else {
                return _Client2['default'].instance.request('/artists/' + ids, 'GET', query);
            }
        }

        /*
         * Get Spotify catalog information about an artist’s albums.
         * Doc: https://developer.spotify.com/web-api/get-artists-albums/
         *
         * @public 
         * @param {string} id Artist id to retrive
         * @param {object} query Optional query parameters.
         * @return {Collection} albumsCollection
         */
    }, {
        key: 'albums',
        value: function albums(id, query) {
            return _Client2['default'].instance.request('/artists/' + id + '/albums', 'GET', query);
        }

        /*
         * Get Spotify catalog information about an artist’s top tracks by country.
         * Doc: https://developer.spotify.com/web-api/get-artists-top-tracks/
         *
         * @public 
         * @param {string} id Artist id to retrive top tracks
         * @param {object} query Optional query parameters. * country is required
         * @return {Collection} tracksCollection
         */
    }, {
        key: 'topTracks',
        value: function topTracks(id, query) {
            return _Client2['default'].instance.request('/artists/' + id + '/top-tracks', 'GET', query);
        }

        /*
         * Get Spotify catalog information about artists similar to a given artist.
         * Doc: https://developer.spotify.com/web-api/get-related-artists/
         *
         * @public 
         * @param {string} id Artist id to retrive related artists
         * @return {Collection} albumsCollection
         */
    }, {
        key: 'relatedArtists',
        value: function relatedArtists(id, query) {
            return _Client2['default'].instance.request('/artists/' + id + '/related-artists', 'GET', query);
        }

        /*
         * Add the current user as a follower of one or more artists.
         * Doc: https://developer.spotify.com/web-api/follow-artists-users/
         *
         * @public 
         * @required {OAuth}
         * @param {array} artists List of artists ids
         * @return {} 
         */
    }, {
        key: 'follow',
        value: function follow(artists) {
            return _Client2['default'].instance.request('/me/following?type=artist', 'PUT', { ids: artists });
        }

        /*
        * Remove the current user as a follower of one or more artists.
        * Doc: https://developer.spotify.com/web-api/unfollow-artists-users/
        *
        * @public 
        * @required {OAuth}
        * @param {array} artists List of artists ids
        * @return {} 
        */
    }, {
        key: 'unfollow',
        value: function unfollow(artists) {
            return _Client2['default'].instance.request('/me/following?type=artist', 'DELETE', { ids: artists });
        }

        /*
         * @public 
         * @param {object} item Object to convert in entity
         * @return {Playlist}
         */
    }, {
        key: 'convert',
        value: function convert(item) {
            return new _helpersArtist2['default'](item);
        }
    }]);

    return ArtistHandler;
})();

exports['default'] = ArtistHandler;
module.exports = exports['default'];