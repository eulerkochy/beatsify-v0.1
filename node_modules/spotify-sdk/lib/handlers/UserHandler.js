/*
 * UserHandler
 * Methods for retrieving information about one or more user/s from the Spotify catalog.
 *
 * API Doc: https://developer.spotify.com/web-api/user-profile-endpoints/
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _helpersUser = require('../helpers/User');

var _helpersUser2 = _interopRequireDefault(_helpersUser);

var _Client = require('../Client');

var _Client2 = _interopRequireDefault(_Client);

var UserHandler = (function () {
    function UserHandler() {
        _classCallCheck(this, UserHandler);
    }

    _createClass(UserHandler, [{
        key: 'me',

        /*
         * Get detailed profile information about the current user.
         * Doc: https://developer.spotify.com/web-api/get-current-users-profile/
         *
         * @public 
         * @required {OAuth}
         * @return {User} User
         */
        value: function me() {
            return _Client2['default'].instance.request('/me');
        }

        /*
         * Get public profile information about a Spotify user.
         * Doc: https://developer.spotify.com/web-api/get-users-profile/
         *
         * @public 
         * @param {string} id User id to retrive
         * @required {OAuth}
         * @return {User} User
         */
    }, {
        key: 'get',
        value: function get(id) {
            return _Client2['default'].instance.request('/users/' + id);
        }

        /*
         * Get a list of the playlists owned or followed by a Spotify user.
         * Doc: https://developer.spotify.com/web-api/get-list-users-playlists/
         *
         * @public 
         * @param {string} id User id to retrive playlists
         * @required {OAuth}
         * @return {Collectoin} playlistCollection
         */
    }, {
        key: 'playlists',
        value: function playlists(id, playlistId, query) {
            if (playlistId) {
                return _Client2['default'].instance.request('/users/' + id + '/playlists/' + playlistId, 'GET', query);
            } else {
                return _Client2['default'].instance.request('/users/' + id + '/playlists', 'GET', query);
            }
        }

        /*
         * @public 
         * @param {object} item Object to convert in entity
         * @return {User}
         */
    }, {
        key: 'convert',
        value: function convert(item) {
            return new _helpersUser2['default'](item);
        }
    }]);

    return UserHandler;
})();

exports['default'] = UserHandler;
module.exports = exports['default'];